<!DOCTYPE html>
<html>
  <head>
    <title>Event HKBU</title>

    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

    
    <!--  
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage 
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.
        
        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:
            
            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <!--STYLES-->
    <link rel="stylesheet" href="/styles/importer.css">
    <!--STYLES END-->
    <link href="http://libs.baidu.com/bootstrap/3.0.3/css/bootstrap.min.css" rel="stylesheet">



  </head>

  <body>


  <div class="container"> 
    <nav class="navbar navbar-default" role="navigation">
      <div class="container-fluid">
        <div class="navbar-header">
          <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#Home">
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span> 
          </button>
          <a class="navbar-brand" href="/../WebNews/index">Home</a>
        </div>

        <div class="collapse navbar-collapse" id="Home">
          <ul class="nav navbar-nav">
              <li id="search"><a href="/../WebNews/search">Search</a></li>
              <%  if(session.userInfo!=null){ 
                    if(session.userInfo.role != "student"){%>
              <li id="create"><a href="/../WebNews/create">Create</a></li>
              <%  if(session.userInfo.role == "admin"){%>
              <li id="admin"><a href="/../WebNews/admin">Admin</a></li> 
              <% }else {%> 
              <li id="admin"><a href="/../WebNews/admin">Edit</a></li> 
              <%}} } %>
          </ul>   
          <ul class="nav navbar-nav navbar-right">
            <li class="dropdown">
              <%  if(session.userInfo!=null){ %>
              <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">
                Hello, <%=session.userInfo.username%> <span class="caret"></span></a>
              <ul class="dropdown-menu">
                <li><a href="/../user/showRegister/">Registered Events</a></li> 
                <li role="separator" class="divider"></li>
                <li><a href="/../user/logout">logout</a></li>
              </ul>
            </li>
                <%  }else  { %>
                <li><a href="/../user/login">Login</a></li> 
              <%  } %>
          </ul>
        </div>
      </div>
    </nav>

    <div class="jumbotron">
      <h2>Event Management System</h2> 
      <p>HKBU Event Management System is a web-based system for departments and student societies to broadcast activities and events as well as for registration.</p> 
    </div>
    </div>
    <%- body %>
    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).
        
        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    
    <!--TEMPLATES END-->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can 
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.
      
      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:
          
          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <!--SCRIPTS-->
    <script src="/js/dependencies/sails.io.js"></script>
    <!--SCRIPTS END-->
   <script src="http://libs.baidu.com/jquery/2.0.0/jquery.min.js"></script>
   <script src="http://libs.baidu.com/bootstrap/3.0.3/js/bootstrap.min.js"></script>
    
  </body>
</html>
